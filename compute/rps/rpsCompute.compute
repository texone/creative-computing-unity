// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BufferA
#pragma kernel BufferB
#pragma kernel BufferC
#pragma kernel BufferD

float2 lower_left(float2 uv)
{
    return frac(uv * 0.5);
}

float2 lower_right(float2 uv)
{
    return frac((uv - float2(1, 0.)) * 0.5);
}

float2 upper_left(float2 uv)
{
    return frac((uv - float2(0., 1)) * 0.5);
}

float2 upper_right(float2 uv)
{
    return frac((uv - 1.) * 0.5);
}

Texture2D<float4> iChannel0;
Texture2D<float4> iChannel1;
Texture2D<float4> iChannel2;
Texture2D<float4> iChannel3;

SamplerState sampler_iChannel0;
SamplerState sampler_iChannel1;
SamplerState sampler_iChannel2;
SamplerState sampler_iChannel3;

float4 sampleTexture(Texture2D<float4> _texture, SamplerState _sampler, float2 uv){
    return _texture.SampleLevel(_sampler, uv, 0);
}

float4 BlurA(float2 uv, int level)
{
    if(level <= 0)
    {
        return sampleTexture(iChannel0, sampler_iChannel0, frac(uv));
    }

    uv = upper_left(uv);
    for(int depth = 1; depth < 8; depth++)
    {
        if(depth >= level)
        {
            break;
        }
        uv = lower_right(uv);
    }

    return sampleTexture(iChannel3, sampler_iChannel3, uv);
}

float4 BlurB(float2 uv, int level)
{
    if(level <= 0)
    {
        return sampleTexture(iChannel1, sampler_iChannel1, frac(uv));
    }

    uv = lower_left(uv);
    for(int depth = 1; depth < 8; depth++)
    {
        if(depth >= level)
        {
            break;
        }
        uv = lower_right(uv);
    }

    return sampleTexture(iChannel3, sampler_iChannel3, uv);
}

float2 GradientA(float2 uv, float2 d, float4 selector, int level){
	float4 dX = 0.5 * BlurA(uv + float2(1.,0.) * d, level) - 0.5 * BlurA(uv - float2(1.,0.) * d, level);
	float4 dY = 0.5 * BlurA(uv + float2(0.,1.) * d, level) - 0.5 * BlurA(uv - float2(0.,1.) * d, level);
	return float2( dot(dX, selector), dot(dY, selector) );
}

float2 iResolution;
float2 iChannelResolution2;
float iTime;
uint iFrame;

float4 blur_horizontal(Texture2D<float4> channel, SamplerState _sampler, float2 uv, float scale)
{
    float h = scale / iResolution.x;
    float4 sum = float4(0.0,0.0,0.0,0.0);

    sum += sampleTexture(channel, _sampler, frac(float2(uv.x - 4.0*h, uv.y)) ) * 0.05;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x - 3.0*h, uv.y)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x - 2.0*h, uv.y)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x - 1.0*h, uv.y)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x + 0.0*h, uv.y)) ) * 0.16;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x + 1.0*h, uv.y)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x + 2.0*h, uv.y)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x + 3.0*h, uv.y)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, frac(float2(uv.x + 4.0*h, uv.y)) ) * 0.05;

    return sum/0.98; // normalize
}

float4 blur_horizontal_left_column(float2 uv, int depth)
{
    float h = pow(2., float(depth)) / iResolution.x;    
    float2 uv1, uv2, uv3, uv4, uv5, uv6, uv7, uv8, uv9;

    uv1 = frac(float2(uv.x - 4.0 * h, uv.y) * 2.);
    uv2 = frac(float2(uv.x - 3.0 * h, uv.y) * 2.);
    uv3 = frac(float2(uv.x - 2.0 * h, uv.y) * 2.);
    uv4 = frac(float2(uv.x - 1.0 * h, uv.y) * 2.);
    uv5 = frac(float2(uv.x + 0.0 * h, uv.y) * 2.);
    uv6 = frac(float2(uv.x + 1.0 * h, uv.y) * 2.);
    uv7 = frac(float2(uv.x + 2.0 * h, uv.y) * 2.);
    uv8 = frac(float2(uv.x + 3.0 * h, uv.y) * 2.);
    uv9 = frac(float2(uv.x + 4.0 * h, uv.y) * 2.);

    if(uv.y > 0.5)
    {
        uv1 = upper_left(uv1);
        uv2 = upper_left(uv2);
        uv3 = upper_left(uv3);
        uv4 = upper_left(uv4);
        uv5 = upper_left(uv5);
        uv6 = upper_left(uv6);
        uv7 = upper_left(uv7);
        uv8 = upper_left(uv8);
        uv9 = upper_left(uv9);
    }
    else{
        uv1 = lower_left(uv1);
        uv2 = lower_left(uv2);
        uv3 = lower_left(uv3);
        uv4 = lower_left(uv4);
        uv5 = lower_left(uv5);
        uv6 = lower_left(uv6);
        uv7 = lower_left(uv7);
        uv8 = lower_left(uv8);
        uv9 = lower_left(uv9);
    }

    for(int level = 0; level < 8; level++)
    {
        if(level >= depth)
        {
            break;
        }

        uv1 = lower_right(uv1);
        uv2 = lower_right(uv2);
        uv3 = lower_right(uv3);
        uv4 = lower_right(uv4);
        uv5 = lower_right(uv5);
        uv6 = lower_right(uv6);
        uv7 = lower_right(uv7);
        uv8 = lower_right(uv8);
        uv9 = lower_right(uv9);
    }

    float4 sum = float4(0.0,0.0,0.0,0.0);

    sum += sampleTexture(iChannel3, sampler_iChannel3, uv1) * 0.05;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv2) * 0.09;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv3) * 0.12;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv4) * 0.15;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv5) * 0.16;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv6) * 0.15;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv7) * 0.12;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv8) * 0.09;
    sum += sampleTexture(iChannel3, sampler_iChannel3, uv9) * 0.05;

    return sum/0.98; // normalize
}

float4 blur_vertical_upper_left(Texture2D<float4> channel, SamplerState _sampler, float2 uv)
{
    float v = 1. / iResolution.y;
    float4 sum = float4(0.0,0.0,0.0,0.0);
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y - 4.0*v)) ) * 0.05;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y - 3.0*v)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y - 2.0*v)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y - 1.0*v)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y + 0.0*v)) ) * 0.16;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y + 1.0*v)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y + 2.0*v)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y + 3.0*v)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, upper_left(float2(uv.x, uv.y + 4.0*v)) ) * 0.05;
    return sum/0.98; // normalize
}

float4 blur_vertical_lower_left(Texture2D<float4> channel, SamplerState _sampler, float2 uv)
{
    float v = 1. / iResolution.y;
    float4 sum = float4(0.0,0.0,0.0,0.0);
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y - 4.0*v)) ) * 0.05;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y - 3.0*v)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y - 2.0*v)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y - 1.0*v)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y + 0.0*v)) ) * 0.16;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y + 1.0*v)) ) * 0.15;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y + 2.0*v)) ) * 0.12;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y + 3.0*v)) ) * 0.09;
    sum += sampleTexture(channel, _sampler, lower_left(float2(uv.x, uv.y + 4.0*v)) ) * 0.05;
    return sum/0.98; // normalize
}

float4 blur_vertical_left_column(float2 uv, int depth)
{
    float v = pow(2., float(depth)) / iResolution.y;

    float2 uv1, uv2, uv3, uv4, uv5, uv6, uv7, uv8, uv9;

    uv1 = frac(float2(uv.x, uv.y - 4.0*v) * 2.);
    uv2 = frac(float2(uv.x, uv.y - 3.0*v) * 2.);
    uv3 = frac(float2(uv.x, uv.y - 2.0*v) * 2.);
    uv4 = frac(float2(uv.x, uv.y - 1.0*v) * 2.);
    uv5 = frac(float2(uv.x, uv.y + 0.0*v) * 2.);
    uv6 = frac(float2(uv.x, uv.y + 1.0*v) * 2.);
    uv7 = frac(float2(uv.x, uv.y + 2.0*v) * 2.);
    uv8 = frac(float2(uv.x, uv.y + 3.0*v) * 2.);
    uv9 = frac(float2(uv.x, uv.y + 4.0*v) * 2.);

    if(uv.y > 0.5)
    {
        uv1 = upper_left(uv1);
        uv2 = upper_left(uv2);
        uv3 = upper_left(uv3);
        uv4 = upper_left(uv4);
        uv5 = upper_left(uv5);
        uv6 = upper_left(uv6);
        uv7 = upper_left(uv7);
        uv8 = upper_left(uv8);
        uv9 = upper_left(uv9);
    }
    else{
        uv1 = lower_left(uv1);
        uv2 = lower_left(uv2);
        uv3 = lower_left(uv3);
        uv4 = lower_left(uv4);
        uv5 = lower_left(uv5);
        uv6 = lower_left(uv6);
        uv7 = lower_left(uv7);
        uv8 = lower_left(uv8);
        uv9 = lower_left(uv9);
    }

    for(int level = 0; level < 8; level++)
    {
        if(level > depth)
        {
            break;
        }

        uv1 = lower_right(uv1);
        uv2 = lower_right(uv2);
        uv3 = lower_right(uv3);
        uv4 = lower_right(uv4);
        uv5 = lower_right(uv5);
        uv6 = lower_right(uv6);
        uv7 = lower_right(uv7);
        uv8 = lower_right(uv8);
        uv9 = lower_right(uv9);
    }

    float4 sum = float4(0.0,0.0,0.0,0.0);

    sum += sampleTexture(iChannel2, sampler_iChannel2, uv1) * 0.05;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv2) * 0.09;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv3) * 0.12;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv4) * 0.15;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv5) * 0.16;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv6) * 0.15;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv7) * 0.12;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv8) * 0.09;
    sum += sampleTexture(iChannel2, sampler_iChannel2, uv9) * 0.05;

    return sum/0.98; // normalize
}



// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void BufferA (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / iResolution.xy;
    float4 noise = (sampleTexture(iChannel2, sampler_iChannel2, id.xy / iChannelResolution2.xy + frac(float2(42,56) * iTime))-0.5)*2.;

    if(iFrame<10)
    {
        Result[id.xy] = noise;
        return;
    }
/*
    float2 mouseV = mouseDelta();
    if(length(mouseV)==0.){
        fragColor = BlurA(uv, 0);
        //return;
    }
    float2 aspect = float2(1.,iResolution.y/iResolution.x);*/
    float2 pixelSize = 1. / iResolution.xy;

    //uv = vortex_pair_warp(uv, iMouse.xy*pixelSize, mouseV*aspect*1.4);
    
    // expansion
    float2 gradientLookupDistance = pixelSize*3.;
    float expansionFactor = 1.;
    
    // reaction-diffusion  
    float differentialFactor = 12./256.;
    float increment = - 3./256.;
    float noiseFactor = 2./256.;
    
    // rock-paper-scissor
    float feedBack = 6./256.;
    float feedForward = 6./256.;

    float4 fragColor;
	fragColor.r = BlurA(uv + GradientA(uv, gradientLookupDistance, float4(4.,0.,-2.,0.), 1)*pixelSize*expansionFactor, 0).r;
	fragColor.g = BlurA(uv + GradientA(uv, gradientLookupDistance, float4(0.,4.,0.,-2.), 1)*pixelSize*expansionFactor, 0).g;
	fragColor.b = BlurA(uv + GradientA(uv, gradientLookupDistance, float4(-2.,0.,4.,0.), 1)*pixelSize*expansionFactor, 0).b;
    fragColor.a = BlurA(uv + GradientA(uv, gradientLookupDistance, float4(0.,-2.,0.,4.), 1)*pixelSize*expansionFactor, 0).a;

   	fragColor += (BlurA(uv, 1) - BlurA(uv, 2))*differentialFactor;

    fragColor += increment + noise * noiseFactor;

    fragColor -= fragColor.argb * feedBack;
    fragColor += fragColor.gbar * feedForward;
    
    fragColor = clamp(fragColor, 0., 1.);

    Result[id.xy] = fragColor;
}

[numthreads(8,8,1)]
void BufferB (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / iResolution.xy;
    float4 noise = sampleTexture(iChannel2, sampler_iChannel2, id.xy / iChannelResolution2.xy + frac(float2(42,56)*iTime));

    if(iFrame<10)
    {
        Result[id.xy] = noise;
        return;
    }


    uv = 0.5 + (uv - 0.5)*0.99;
    float2 pixelSize = 1./iResolution.xy;
    /*
    float2 mouseV = mouseDelta();
    float2 aspect = float2(1.,iResolution.y/iResolution.x);
    uv = vortex_pair_warp(uv, iMouse.xy*pixelSize, mouseV*aspect*1.4);
	*/
    float time = float(iFrame)/60.;
    //uv = uv + float2(sin(time*0.1 + uv.x*2. +1.) - sin(time*0.214 + uv.y*2. +1.), sin(time*0.168 + uv.x*2. +1.) - sin(time*0.115 +uv.y*2. +1.))*pixelSize*1.5;

    float4 fragColor;
    fragColor = BlurB(uv, 0);
    fragColor += ((BlurB(uv, 1) - BlurB(uv, 2))*0.5 + (noise-0.5) * 0.004); 

    fragColor = clamp(fragColor, 0., 1.);

    //fragColor = noise; // reset

    Result[id.xy] = fragColor;
}

[numthreads(8,8,1)]
void BufferC (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / iResolution.xy;

    float4 fragColor;
    if(uv.x < 0.5)
    {
        float2 uv_half = frac(uv*2.);
        if(uv.y > 0.5)
        {
            fragColor = blur_horizontal(iChannel0, sampler_iChannel0, uv_half, 1.);
        }
        else
        {
            fragColor = blur_horizontal(iChannel1, sampler_iChannel1, uv_half, 1.);
        }
    }
    else
    {
        for(int level = 0; level < 8; level++)
        {
            if((uv.x > 0.5 && uv.y > 0.5) || (uv.x <= 0.5))
            {
                break;
            }
            float2 uv_half = frac(uv*2.);
            fragColor = blur_horizontal_left_column(uv_half, level);
            uv = uv_half;
        }
    }

    Result[id.xy] = fragColor;
}

[numthreads(8,8,1)]
void BufferD (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / iResolution.xy;
    float2 uv_orig = uv;
    float2 uv_half = frac(uv*2.);
    
    float4 fragColor;
    
    if(uv.x < 0.5)
    {
        if(uv.y > 0.5)
        {
            fragColor = blur_vertical_upper_left(iChannel2, sampler_iChannel2, uv_half);
        }
        else
        {
            fragColor = blur_vertical_lower_left(iChannel2, sampler_iChannel2, uv_half);
        }
    }
    else
    {
        for(int level = 0; level < 8; level++)
        {
            if((uv.x > 0.5 && uv.y >= 0.5) || (uv.x < 0.5))
            {
                break;
            }
            float2 uv_half = frac(uv*2.);
            fragColor = blur_vertical_left_column(uv_half, level);
            uv = uv_half;
        }  
    }
    uv = uv_orig;
    /*
    float eighth = 1./8.;
    if(uv.x > 7.*eighth && uv.x < 8.*eighth && uv.y > 2.*eighth && uv.y < 3.*eighth)
    {
        fragColor = float4(iMouse.xy / iResolution.xy, iMouse.zw / iResolution.xy);
    }*/

    Result[id.xy] = fragColor;
}
